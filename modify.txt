import React, { FC, useState, useEffect } from 'react'
import { EditPropertyProps, flat } from 'adminjs'
import { DropZone, FormGroup, Label, DropZoneItem } from '@adminjs/design-system'
import PropertyCustom from '../types/property-custom.type'

const Edit: FC<EditPropertyProps> = ({ property, record, onChange }) => {
    const { params } = record
    const { custom } = property as unknown as { custom: PropertyCustom }

    const path = flat.get(params, custom.filePathProperty)
    const key = flat.get(params, custom.keyProperty)
    const file = flat.get(params, custom.fileProperty)

    const [originalKey, setOriginalKey] = useState(key)
    const [filesToUpload, setFilesToUpload] = useState < Array < File >> ([])

    useEffect(() => {
        // it means means that someone hit save and new file has been uploaded
        // in this case fliesToUpload should be cleared.
        // This happens when user turns off redirect after new/edit
        if (
            (typeof key === 'string' && key !== originalKey)
            || (typeof key !== 'string' && !originalKey)
            || (typeof key !== 'string' && Array.isArray(key) && key.length !== originalKey.length)
        ) {
            setOriginalKey(key)
            setFilesToUpload([])
        }
    }, [key, originalKey])

    const onUpload = (files: Array<File>): void => {
        setFilesToUpload(files)
        onChange(custom.fileProperty, files)
    }

    const handleRemove = () => {
        onChange(custom.fileProperty, null)
    }

    const handleMultiRemove = (singleKey) => {
        const index = (flat.get(record.params, custom.keyProperty) || []).indexOf(singleKey)
        const filesToDelete = flat.get(record.params, custom.filesToDeleteProperty) || []
        if (
            path && path.length > 0
        ) {
            const newPath = path.map((currentPath, i) => (i !== index ? currentPath : null))
            let newParams = flat.set(
                record.params,
                custom.filesToDeleteProperty,
                [...filesToDelete, index],
            )
            newParams = flat.set(newParams, custom.filePathProperty, newPath)

            onChange({
                ...record,
                params: newParams,
            })
        } else {
            // eslint-disable-next-line no-console
            console.log('You cannot remove file when there are no uploaded files yet')
        }
    }

    return (
        <FormGroup>
            <Label>{property.label}</Label>
            <DropZone
                onChange={onUpload}
                multiple={custom.multiple}
                validate={{
                    mimeTypes: custom.mimeTypes as Array<string>,
                    maxSize: custom.maxSize,
                }}
                files={filesToUpload}
            />
            {!custom.multiple && key && path && !filesToUpload.length && file !== null && (
                <><DropZoneItem filename={key} src={path} onRemove={handleRemove} /> <img style={{ width: '100px' }} src={`/${path}`} /></>
            )}
            {custom.multiple && key && key.length && path ? (
                <>
                    {key.map((singleKey, index) => {
                        // when we remove items we set only path index to nulls.
                        // key is still there. This is because
                        // we have to maintain all the indexes. So here we simply filter out elements which
                        // were removed and display only what was left
                        const currentPath = path[index]
                        return currentPath ? (
                            <>
                                <DropZoneItem
                                    key={singleKey}
                                    filename={singleKey}
                                    src={`${currentPath}`}
                                    onRemove={() => handleMultiRemove(singleKey)}
                                /><img style={{ width: '100px' }} src={`/${currentPath}`} /></>
                        ) : ''
                    })}
                </>
            ) : ''}
        </FormGroup>
    )
}

export default Edit
import React, { FC } from 'react'
// eslint-disable-next-line import/no-extraneous-dependencies
import { Icon, Button, Box } from '@adminjs/design-system'

import { ShowPropertyProps, flat } from 'adminjs'
import { ImageMimeTypes, AudioMimeTypes } from '../types/mime-types.type'
import PropertyCustom from '../types/property-custom.type'

type Props = ShowPropertyProps & {
    width?: number | string;
};

type SingleFileProps = {
    name: string,
    path?: string,
    mimeType?: string,
    width?: number | string;
}

const SingleFile: FC<SingleFileProps> = (props) => {
    const { name, path, mimeType, width } = props
    if (path && path.length) {
        if (mimeType && ImageMimeTypes.includes(mimeType as any)) {
            return <img src={`/${path}`} style={{ maxHeight: width, maxWidth: width }} alt={name} />
        }
        if (mimeType && AudioMimeTypes.includes(mimeType as any)) {
            return (
                <audio
                    controls
                    src={path}
                >
                    Your browser does not support the
                    <code>audio</code>
                    <track kind="captions" />
                </audio>
            )
        }
    }
    return (
        <Box>
            <Button as="a" href={path} ml="default" size="sm" rounded target="_blank">
                <Icon icon="DocumentDownload" color="white" mr="default" />
                {name}
            </Button>
        </Box>
    )
}

const File: FC<Props> = ({ width, record, property }) => {
    const { custom } = property as unknown as { custom: PropertyCustom }

    const path = flat.get(record?.params, custom.filePathProperty)

    if (!path) {
        return null
    }

    const name = flat.get(
        record?.params,
        custom.fileNameProperty ? custom.fileNameProperty : custom.keyProperty,
    )
    const mimeType = custom.mimeTypeProperty && flat.get(record?.params, custom.mimeTypeProperty)

    if (!property.custom.multiple) {
        return <SingleFile path={path} name={name} width={width} mimeType={mimeType} />
    }

    return (
        <>
            {path.map((singlePath, index) => (
                <SingleFile
                    key={singlePath}
                    path={singlePath}
                    name={name[index]}
                    width={width}
                    mimeType={mimeType[index]}
                />
            ))}
        </>
    )
}

export default File
